cmake_minimum_required (VERSION 3.5)
project (Sidle)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(JEMALLOC_DIR "/usr/lib/x86_64-linux-gnu")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "/usr/local/lib")

# enable AddressSanitizer
# set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")
# set (CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address")

link_directories(${JEMALLOC_DIR})

add_compile_options(-w)

link_libraries(jemalloc)

###############################################################################
# GLOBAL DEFINITIONS
###############################################################################

set(STR_8 "")
set(STR_16 "")
set(STR_20 "")
set(STR_24 "")
set(STR_32 "")
set(STR_40 "")
set(STR_64 "")
set(STR_128 "")
set(STR_140 "")
set(STR_256 "")
set(STR_512 "")
set(CORRECTNESS "")
set(NDEBUG "")
set(NDEBUGGING "")
set(READONLY "")
set(FULL_BINARY "")

if(s STREQUAL 8)
    set(STR_8 "STR_8")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    message("STR_8 defined")
elseif(s STREQUAL 16)
    set(STR_8 "")
    set(STR_16 "STR_16")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    message("STR_16 defined")
elseif(s STREQUAL 20)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "STR_20")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_20 defined")
elseif(s STREQUAL 24)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "STR_24")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_24 defined")
elseif(s STREQUAL 32)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_32 "STR_32")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_32 defined")
elseif(s STREQUAL 40)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_32 "")
    set(STR_40 "STR_40")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_40 defined")
elseif(s STREQUAL 64)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_32 "")
    set(STR_40 "")
    set(STR_64 "STR_64")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_64 defined")
elseif(s STREQUAL 128)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_32 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "STR_128")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_128 defined")
elseif(s STREQUAL 140)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "STR_140")
    set(STR_256 "")
    set(STR_512 "")
    message("STR_140 defined")
elseif(s STREQUAL 256)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "STR_256")
    set(STR_512 "")
    message("STR_256 defined")
elseif(s STREQUAL 512)
    set(STR_8 "")
    set(STR_16 "")
    set(STR_20 "")
    set(STR_24 "")
    set(STR_40 "")
    set(STR_64 "")
    set(STR_128 "")
    set(STR_140 "")
    set(STR_256 "")
    set(STR_512 "STR_512")
    message("STR_512 defined")
endif()

if(c STREQUAL 1)
    set(CORRECTNESS "CORRECTNESS")
    message("CORRECTNESS defined")
endif()

if(r STREQUAL 1)
    set(READONLY "READONLY")
    message("READONLY defined")
endif()

if(nd STREQUAL 1)
    set(NDEBUG "NDEBUG")
    set(NDEBUGGING "NDEBUGGING")
    message("NDEBUG & NDEBUGGING defined")
endif()

if(fb STREQUAL 1)
    set(FULL_BINARY "FULL_BINARY")
    message("FULL_BINARY defined")
endif()

set(INPLACE_UPDATE "")
if(iu STREQUAL 1)
    set(INPLACE_UPDATE "INPLACE_UPDATE")
    message("INPLACE_UPDATE defined")
endif()

if(vl STREQUAL 8)
    set(VAL_8 "VAL_8")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_8 defined")
elseif(vl STREQUAL 16)
    set(VAL_8 "")
    set(VAL_16 "VAL_16")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_16 defined")
elseif(vl STREQUAL 24)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "VAL_24")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_24 defined")
elseif(vl STREQUAL 32)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "VAL_32")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_24 defined")
elseif(vl STREQUAL 40)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "VAL_40")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_40 defined")
elseif(vl STREQUAL 64)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "VAL_64")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_64 defined")
elseif(vl STREQUAL 128)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "VAL_128")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_128 defined")
elseif(vl STREQUAL 256)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "VAL_256")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_256 defined")
elseif(vl STREQUAL 512)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "VAL_512")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL_512 defined")
elseif(vl STREQUAL 1024)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "VAL_1024")
    set(VAL_2048 "")
    set(VAL_4096 "")
    message("VAL 1024 defined")
elseif(vl STREQUAL 2048)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "VAL_2048")
    set(VAL_4096 "")
    message("VAL 2048 defined")
elseif(vl STREQUAL 4096)
    set(VAL_8 "")
    set(VAL_16 "")
    set(VAL_24 "")
    set(VAL_32 "")
    set(VAL_40 "")
    set(VAL_64 "")
    set(VAL_128 "")
    set(VAL_256 "")
    set(VAL_512 "")
    set(VAL_1024 "")
    set(VAL_2048 "")
    set(VAL_4096 "VAL_4096")
    message("VAL 4096 defined")
endif()

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# add_compile_options(-O0 -g -Wall -Werror -fmax-errors=5)
add_compile_options(-O3 -g -Wall -fmax-errors=5)

###############################################################################
# includes
###############################################################################

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/benchmark)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/stx-btree/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/sidle_utils)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/cxl_utils)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/art)
add_definitions(-include ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/config.h)

###############################################################################
# LIBJSON
###############################################################################
add_library(LIBJSON
    STATIC
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/cxl_utils/cxl_allocator.c
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/cxl_cpp_allocator.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/compiler.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/json.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/kvrandom.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/kvthread.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/memdebug.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/msgpack.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/str.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/straccum.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/string.cc
)

###############################################################################
# masstree_files
###############################################################################
file(GLOB masstree_files
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/cxl_cpp_allocator.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/kvio.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/../third_party/masstree-beta/masstree.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/query_masstree.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/value_array.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/value_string.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/value_versioned_array.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/masstree-beta/string_slice.cc
)

add_subdirectory(benchmark)
